rowSums(tab1[,1:2])
# ## Visualize age distributions for each subtype
# adH1 = subset(dat.002, flutype == 1, select = age)$age
# adH1 = hist(adH1, breaks = seq(17.5, 90.5, by = 1))$counts
# adH3 = subset(dat.002, flutype == 2, select = age)$age
# adH3 = hist(adH3, breaks = seq(17.5, 90.5, by = 1))$counts
############# END DATA CLEANING #######################
############# dat.002 contains clean data #############
##############################################
##  4. Reformat data for input into likelihood
##     Generate corresponding inputs for each tested factor:
##      - Vaccination in the past year
##      - Antiviral treatment
##      - Presence of underlying conditions
##      - Age (fit as a step function)
##      - Prob of imprinting at the HA group level
##      - " ......................" HA subtype level
##      - " ......................" NA subtype level
##############################################
## rns lists all unique combinations of season and country
## rns will form row names in a master matrix where we store data and relevant model inputs for each country-season of case observation
ccs = rep(unique(dat.002$country), each = length(unique(dat.002$season)))
ssns = rep(unique(dat.002$season), times = length(unique(dat.002$country)))
rns = paste(ccs, ssns, sep = "_") # Row names of the master matrix
####################################################################
## 4a. Make a master table of observed case counts in each country, season and single year of age. Country-years go on rows, age goes on columns.
##  H1.master - confirmed H1N1 case counts
##  H3.master - confirmed H3N2 case counts
##  tested.master - all subjects tested (counts)
##  av.master - fraction of tested cases in each country-season, and single year of age that was treated with antivirals
##  dx.master - fraction of tested cases in each country-season and single year of age that had underlying conditions
##  vac.master - fraction of tested cases in each country-season and single year of age that were vaccinated
H1.master = H3.master = tested.master = av.master = vac.master =  dx.master = matrix(0, nrow = length(rns), ncol = length(18:90), dimnames = list(rns, 18:90))
for(rr in 1:length(rns)){
# Extract data from country-season of interest as a data frame
valid = subset(dat.002, country == ccs[rr] & season == ssns[rr])
# Count the number of subjects from the focal country-season in each single year of age from 18-90
tested = sapply(18:90, FUN = function(aa){sum(valid$age == aa)})
tested.master[rr, ] = tested ## Store the country-year specific counts into the master matrix
## Fill in av.master
num = sapply(18:90, FUN = function(aa){sum(valid$age == aa & valid$anyav == 1)}) # Count the number of subjects in each age bin treated with antivirals
av.master[rr, ] = (num/ifelse(tested > 0, tested, 1)) # Divide by the number tested to get the proprtion treated with avs in each age bin.
## Note - if no patients were enrolled in a particular age bin, normalizing leads to a divide by zero error.
## To avoid this, substitute a 1 where tested == 0 to avoid 0 denominator.
## This substitituion will only be made when no patients were enrolled in a particular age group, so the numerator (number treated with antivirals) will also be 0. The final entry in av.master will be 0/1 = 0
## Repeat for proportion vaccinated:
num = sapply(18:90, FUN = function(aa){sum(valid$age == aa & valid$anyvac == 1)}) ## Fill in master matrix
vac.master[rr, ] = (num/ifelse(tested > 0, tested, 1))
## Repeat for proportion with underlying conditions:
num = sapply(18:90, FUN = function(aa){sum(valid$age == aa & valid$anydx == 1)})
dx.master[rr, ] = (num/ifelse(tested > 0, tested, 1))
# Count up H1N1 cases in each age group from that country and season
H1.master[rr, ] = sapply(18:90, FUN = function(aa){sum(valid$age == aa & valid$flutype == 1)})
# Count up H3N2 cases in each age group from that country and season
H3.master[rr, ] = sapply(18:90, FUN = function(aa){sum(valid$age == aa & valid$flutype == 2)})
}
##############################################
##  4b. Import imprinting reconstructions
## (i.e. probs of imprinting to a particular subtype, given birth year)
##############################################
table(dat.002$COUNTRY_CODE, dat.002$year) # View countires and years in which we need to do reconstrutions
## See ../Reconstructions/02-create-INSIGHT-weights.R for code to do reconstructions
load('../../Reconstructions/INSIGHT_weights2018-12-04.RData')
## this loads a variable named weights
## weights is a list with elements:
## weights$weights.master.1 -> probabilities of imprinting to H1N1 in childhood
## weights$weights.master.2 -> probabilities of imprinting to H2N2 in childhood
## weights$weights.master.3 -> probabilities of imprinting to H3N2 in childhood
## weights$weights.master.naiive -> probabilities of not yet having imprinted (nonzero probs in children only)
##### ------
# Impute possible birth years, and weighted average of birth year-specific imprinting protection probs from age and date of enrollment.
##### -------
# Rationale for multiple possible birth years given in methods
# Initialize matrix to store probs of birth in years y-a-1, y-a, and y-a+1 given the month of observation.
by_probs = matrix(NA, 12, 2, dimnames = list(format(ISOdate(2018,1:12,1),"%B"), c('y-a-1', 'y-a')))
by_probs[,1] = seq(11.5, .5, by = -1)
by_probs[,2] = seq(.5, 11.5, by = 1)
# calculate vectors of possible birth years for each subject
y_a_1 = dat.002$year - dat.002$age - 1 # y-a-1
y_a = y_a_1 + 1 # y-a
# generate a vector of weights, representing the prob that each individual was born in year y-a-1, or y-a, given their month of observation
w1 = by_probs[dat.002$num_month,1]/12
w2 = by_probs[dat.002$num_month,2]/12
any(w1+w2 != 1) # Check that all weights sum to 1 for each individual
# extract probs of protection for each individual, given birth in year y-a-1 and y-a
rns = paste(dat.002$year, dat.002$country, sep = "")
## Subtype -specific protection
pH1pro1 = weights[[1]][rns, as.character(y_a_1)]
pH1pro2 = weights[[1]][rns, as.character(y_a)]
pH3pro1 = weights[[3]][rns, as.character(y_a_1)]
pH3pro2 = weights[[3]][rns, as.character(y_a)]
pg1pro1 = weights[[1]][rns, as.character(y_a_1)]+weights[[2]][rns, as.character(y_a_1)]
pg1pro2 = weights[[1]][rns, as.character(y_a)]+weights[[2]][rns, as.character(y_a)]
pg2pro1 = weights[[3]][rns, as.character(y_a_1)]
pg2pro2 = weights[[3]][rns, as.character(y_a)]
pN1pro1 = weights[[1]][rns, as.character(y_a_1)]
pN1pro2 = weights[[1]][rns, as.character(y_a)]
pN2pro1 = weights[[3]][rns, as.character(y_a_1)]+weights[[2]][rns, as.character(y_a_1)]
pN2pro2 = weights[[3]][rns, as.character(y_a)]+weights[[2]][rns, as.character(y_a)]
# take a weighted average of birth year-specific protection probs for each individual
dat.002$pH1pro = w1*pH1pro1+w2*pH1pro2
dat.002$pH3pro = w1*pH3pro1+w2*pH3pro2
dat.002$pg1pro = w1*pg1pro1+w2*pg1pro2
dat.002$pg2pro = w1*pg2pro1+w2*pg2pro2
dat.002$pN1pro = w1*pN1pro1+w2*pN1pro2
dat.002$pN2pro = w1*pN2pro1+w2*pN2pro2
##############################################
##  4b. Import imprinting reconstructions
## (i.e. probs of imprinting to a particular subtype, given birth year)
##############################################
table(dat.002$country, dat.002$year) # View countires and years in which we need to do reconstrutions
# take a weighted average of birth year-specific protection probs for each individual
dat.002$pH1pro = w1*pH1pro1+w2*pH1pro2; rm(pH1pro1, pH1pro2)
## This file loads INSIGHT FLU002 data and inputs for multinomial analysis.
library(dplyr)
library(tidyr)
## OUTPUTS
outfile1 = 'processed-data/INSIGHT002_processed.csv' # .csv of cleaned data set
outfile2 = 'processed-data/INSIGHT_case_counts.txt'
###############################
# 1. Load raw data
###############################
dat.002 = read.csv('raw-data/data002.csv', colClasses = c('character', 'integer', 'integer', 'integer', 'character', 'integer', 'character', 'character', 'character', 'character', 'character', 'character', 'character', 'character'))
head(dat.002)
###############################
# 2. Clean raw data
###############################
Country = character(nrow(dat.002))
ccs = unique(dat.002$COUNTRY_CODE); ccs # Existing codes
cnames = c('Denmark', 'Spain', 'Germany', 'Estonia', 'USA', 'Belgium', 'Portugal', 'Poland', 'Austria', 'UK', 'Australia', 'Thailand', 'Argentina', 'Chile', 'Greece', 'Peru', 'Japan') # Names with which to replace
rbind(ccs, cnames) # Check
# Add true country names to data frame
for(ii in 1:length(ccs)){
Country[which(dat.002$COUNTRY_CODE == ccs[ii])] = cnames[ii]
}
dat.002$country = Country
rm(cnames, ccs, Country) # Remove code names
# Exclude cases over age 90
# Do this because individuals observed in 2009 of age 90 could have been born in 1918
# Older individuals could have been born before 1918
paste('Excluding', sum(dat.002$age > 90, na.rm = TRUE), 'cases over age 90 from INSIGHT 002 data.')
dat.002 = dat.002[-which(dat.002$age > 90), ]
# Make sure all month entries follow the specified format
if(any(!(dat.002$month %in% c('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov','Dec')))){ error('Ivalid month passed to month_to_num')}
# Input numeric months
month_to_num = function(months.in){
months.in[months.in == 'Jan'] = 1
months.in[months.in == 'Feb'] = 2
months.in[months.in == 'Mar'] = 3
months.in[months.in == 'Apr'] = 4
months.in[months.in == 'May'] = 5
months.in[months.in == 'Jun'] = 6
months.in[months.in == 'Jul'] = 7
months.in[months.in == 'Aug'] = 8
months.in[months.in == 'Sep'] = 9
months.in[months.in == 'Oct'] = 10
months.in[months.in == 'Nov'] = 11
months.in[months.in == 'Dec'] = 12
as.numeric(months.in)
}
# Convert
dat.002$num_month = month_to_num(dat.002$month)
# Define seasons based on October to October years
sort(unique(dat.002$year))
NHfirst.part = c('Oct', 'Nov', 'Dec')
NHsecond.part = c('Jan', 'Feb', 'Mar')
SH = c('Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep')
ssn = vector('character', nrow(dat.002)) # Initialize an empty vector to record season codes
season.codes.NH = paste('NH', c('09', 10:16), 10:17, sep = '.') # Genearte character vectors of NH and SH seasons in data
season.codes.SH = paste('SH', 10:17, sep = '.')
# Assign each observation in the dat.002 data frame to a NH or SH season (Oct-March = NH, April - Sept = SH)
yy = 2009
for(ii in 1:8){
NH.indices = c(which(dat.002$year == yy & dat.002$month %in% NHfirst.part), which(dat.002$year == yy+1 &  dat.002$month %in% NHsecond.part))
ssn[NH.indices] = season.codes.NH[ii]
SH.indices = which(dat.002$year == yy + 1 & dat.002$month %in% SH)
ssn[SH.indices] = season.codes.SH[ii]
yy = yy + 1
}
# Add the season assignements to the data frame
dat.002$season = (ssn)
rm(ssn) # Tidy up
## Pull out variables used in model
dat.002 = subset(dat.002, select = c('age', 'anyvac', 'anydx', 'anyav', 'season', 'country', 'season', 'flutype', 'year', 'num_month'))
nrow(dat.002) -> original
## Drop rows with missing data:
paste('Dropping', sum((apply(dat.002, MARGIN = 1,  function(xx) (any(is.na(xx)))))), 'rows with NA')
# Exclude rows with any NAs
dat.002 = na.omit(dat.002)
# Exclude those with unknown vaccination status.
invalid = which(dat.002$anyvac == 2)
dat.002 = dat.002[-invalid, ]
paste('Dropping', length(invalid), 'cases wtih unknown vaccination status.')
# Exclude two observations with very low age
invalid = which(dat.002$age == 17)
dat.002 = dat.002[-invalid,]
paste('Dropping', length(invalid), 'cases under age 18.')
## Exclude cases with unknown flutype or coinfection
dat.002 = subset(dat.002, flutype %in% c(1,2,3,4))
paste('Excluded', original-nrow(dat.002), 'total cases with missing info from dat.002')
## Save cleaned data set
write.csv(dat.002, outfile1, row.names = FALSE)
## Check data
# check case counts by country and subtype
table(dat.002$country, dat.002$flutype) -> tab1
tab1
tab1[,1:2]
rowSums(tab1[,1:2])
# ## Visualize age distributions for each subtype
# adH1 = subset(dat.002, flutype == 1, select = age)$age
# adH1 = hist(adH1, breaks = seq(17.5, 90.5, by = 1))$counts
# adH3 = subset(dat.002, flutype == 2, select = age)$age
# adH3 = hist(adH3, breaks = seq(17.5, 90.5, by = 1))$counts
############# END DATA CLEANING #######################
############# dat.002 contains clean data #############
##############################################
##  4. Reformat data for input into likelihood
##     Generate corresponding inputs for each tested factor:
##      - Vaccination in the past year
##      - Antiviral treatment
##      - Presence of underlying conditions
##      - Age (fit as a step function)
##      - Prob of imprinting at the HA group level
##      - " ......................" HA subtype level
##      - " ......................" NA subtype level
##############################################
## rns lists all unique combinations of season and country
## rns will form row names in a master matrix where we store data and relevant model inputs for each country-season of case observation
ccs = rep(unique(dat.002$country), each = length(unique(dat.002$season)))
ssns = rep(unique(dat.002$season), times = length(unique(dat.002$country)))
rns = paste(ccs, ssns, sep = "_") # Row names of the master matrix
####################################################################
## 4a. Make a master table of observed case counts in each country, season and single year of age. Country-years go on rows, age goes on columns.
##  H1.master - confirmed H1N1 case counts
##  H3.master - confirmed H3N2 case counts
##  tested.master - all subjects tested (counts)
##  av.master - fraction of tested cases in each country-season, and single year of age that was treated with antivirals
##  dx.master - fraction of tested cases in each country-season and single year of age that had underlying conditions
##  vac.master - fraction of tested cases in each country-season and single year of age that were vaccinated
H1.master = H3.master = tested.master = av.master = vac.master =  dx.master = matrix(0, nrow = length(rns), ncol = length(18:90), dimnames = list(rns, 18:90))
for(rr in 1:length(rns)){
# Extract data from country-season of interest as a data frame
valid = subset(dat.002, country == ccs[rr] & season == ssns[rr])
# Count the number of subjects from the focal country-season in each single year of age from 18-90
tested = sapply(18:90, FUN = function(aa){sum(valid$age == aa)})
tested.master[rr, ] = tested ## Store the country-year specific counts into the master matrix
## Fill in av.master
num = sapply(18:90, FUN = function(aa){sum(valid$age == aa & valid$anyav == 1)}) # Count the number of subjects in each age bin treated with antivirals
av.master[rr, ] = (num/ifelse(tested > 0, tested, 1)) # Divide by the number tested to get the proprtion treated with avs in each age bin.
## Note - if no patients were enrolled in a particular age bin, normalizing leads to a divide by zero error.
## To avoid this, substitute a 1 where tested == 0 to avoid 0 denominator.
## This substitituion will only be made when no patients were enrolled in a particular age group, so the numerator (number treated with antivirals) will also be 0. The final entry in av.master will be 0/1 = 0
## Repeat for proportion vaccinated:
num = sapply(18:90, FUN = function(aa){sum(valid$age == aa & valid$anyvac == 1)}) ## Fill in master matrix
vac.master[rr, ] = (num/ifelse(tested > 0, tested, 1))
## Repeat for proportion with underlying conditions:
num = sapply(18:90, FUN = function(aa){sum(valid$age == aa & valid$anydx == 1)})
dx.master[rr, ] = (num/ifelse(tested > 0, tested, 1))
# Count up H1N1 cases in each age group from that country and season
H1.master[rr, ] = sapply(18:90, FUN = function(aa){sum(valid$age == aa & valid$flutype == 1)})
# Count up H3N2 cases in each age group from that country and season
H3.master[rr, ] = sapply(18:90, FUN = function(aa){sum(valid$age == aa & valid$flutype == 2)})
}
##############################################
##  4b. Import imprinting reconstructions
## (i.e. probs of imprinting to a particular subtype, given birth year)
##############################################
table(dat.002$country, dat.002$year) # View countires and years in which we need to do reconstrutions
## See ../Reconstructions/02-create-INSIGHT-weights.R for code to do reconstructions
load('../../Reconstructions/INSIGHT_weights2018-12-04.RData')
## this loads a variable named weights
## weights is a list with elements:
## weights$weights.master.1 -> probabilities of imprinting to H1N1 in childhood
## weights$weights.master.2 -> probabilities of imprinting to H2N2 in childhood
## weights$weights.master.3 -> probabilities of imprinting to H3N2 in childhood
## weights$weights.master.naiive -> probabilities of not yet having imprinted (nonzero probs in children only)
##### ------
# Impute possible birth years, and weighted average of birth year-specific imprinting protection probs from age and date of enrollment.
##### -------
# Rationale for multiple possible birth years given in methods
# Initialize matrix to store probs of birth in years y-a-1, y-a, and y-a+1 given the month of observation.
by_probs = matrix(NA, 12, 2, dimnames = list(format(ISOdate(2018,1:12,1),"%B"), c('y-a-1', 'y-a')))
by_probs[,1] = seq(11.5, .5, by = -1)
by_probs[,2] = seq(.5, 11.5, by = 1)
# calculate vectors of possible birth years for each subject
y_a_1 = dat.002$year - dat.002$age - 1 # y-a-1
y_a = y_a_1 + 1 # y-a
# generate a vector of weights, representing the prob that each individual was born in year y-a-1, or y-a, given their month of observation
w1 = by_probs[dat.002$num_month,1]/12
w2 = by_probs[dat.002$num_month,2]/12
any(w1+w2 != 1) # Check that all weights sum to 1 for each individual
# extract probs of protection for each individual, given birth in year y-a-1 and y-a
rns = paste(dat.002$year, dat.002$country, sep = "")
## Subtype -specific protection
pH1pro1 = weights[[1]][rns, as.character(y_a_1)]
pH1pro2 = weights[[1]][rns, as.character(y_a)]
pH3pro1 = weights[[3]][rns, as.character(y_a_1)]
pH3pro2 = weights[[3]][rns, as.character(y_a)]
pg1pro1 = weights[[1]][rns, as.character(y_a_1)]+weights[[2]][rns, as.character(y_a_1)]
pg1pro2 = weights[[1]][rns, as.character(y_a)]+weights[[2]][rns, as.character(y_a)]
pg2pro1 = weights[[3]][rns, as.character(y_a_1)]
pg2pro2 = weights[[3]][rns, as.character(y_a)]
pN1pro1 = weights[[1]][rns, as.character(y_a_1)]
pN1pro2 = weights[[1]][rns, as.character(y_a)]
pN2pro1 = weights[[3]][rns, as.character(y_a_1)]+weights[[2]][rns, as.character(y_a_1)]
pN2pro2 = weights[[3]][rns, as.character(y_a)]+weights[[2]][rns, as.character(y_a)]
# take a weighted average of birth year-specific protection probs for each individual
dat.002$pH1pro = w1*pH1pro1+w2*pH1pro2; rm(pH1pro1, pH1pro2)
dat.002$pH3pro = w1*pH3pro1+w2*pH3pro2; rm(pH3pro1, pH3pro2)
dat.002$pg1pro = w1*pg1pro1+w2*pg1pro2; rm(pg1pro1), pg2pro2)
rm(pg1pro1, pg2pro2)
## This file loads INSIGHT FLU002 data and inputs for multinomial analysis.
library(dplyr)
library(tidyr)
## OUTPUTS
outfile1 = 'processed-data/INSIGHT002_processed.csv' # .csv of cleaned data set
outfile2 = 'processed-data/INSIGHT_case_counts.txt'
###############################
# 1. Load raw data
###############################
dat.002 = read.csv('raw-data/data002.csv', colClasses = c('character', 'integer', 'integer', 'integer', 'character', 'integer', 'character', 'character', 'character', 'character', 'character', 'character', 'character', 'character'))
head(dat.002)
###############################
# 2. Clean raw data
###############################
Country = character(nrow(dat.002))
ccs = unique(dat.002$COUNTRY_CODE); ccs # Existing codes
cnames = c('Denmark', 'Spain', 'Germany', 'Estonia', 'USA', 'Belgium', 'Portugal', 'Poland', 'Austria', 'UK', 'Australia', 'Thailand', 'Argentina', 'Chile', 'Greece', 'Peru', 'Japan') # Names with which to replace
rbind(ccs, cnames) # Check
# Add true country names to data frame
for(ii in 1:length(ccs)){
Country[which(dat.002$COUNTRY_CODE == ccs[ii])] = cnames[ii]
}
dat.002$country = Country
rm(cnames, ccs, Country) # Remove code names
# Exclude cases over age 90
# Do this because individuals observed in 2009 of age 90 could have been born in 1918
# Older individuals could have been born before 1918
paste('Excluding', sum(dat.002$age > 90, na.rm = TRUE), 'cases over age 90 from INSIGHT 002 data.')
dat.002 = dat.002[-which(dat.002$age > 90), ]
# Make sure all month entries follow the specified format
if(any(!(dat.002$month %in% c('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov','Dec')))){ error('Ivalid month passed to month_to_num')}
# Input numeric months
month_to_num = function(months.in){
months.in[months.in == 'Jan'] = 1
months.in[months.in == 'Feb'] = 2
months.in[months.in == 'Mar'] = 3
months.in[months.in == 'Apr'] = 4
months.in[months.in == 'May'] = 5
months.in[months.in == 'Jun'] = 6
months.in[months.in == 'Jul'] = 7
months.in[months.in == 'Aug'] = 8
months.in[months.in == 'Sep'] = 9
months.in[months.in == 'Oct'] = 10
months.in[months.in == 'Nov'] = 11
months.in[months.in == 'Dec'] = 12
as.numeric(months.in)
}
# Convert
dat.002$num_month = month_to_num(dat.002$month)
# Define seasons based on October to October years
sort(unique(dat.002$year))
NHfirst.part = c('Oct', 'Nov', 'Dec')
NHsecond.part = c('Jan', 'Feb', 'Mar')
SH = c('Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep')
ssn = vector('character', nrow(dat.002)) # Initialize an empty vector to record season codes
season.codes.NH = paste('NH', c('09', 10:16), 10:17, sep = '.') # Genearte character vectors of NH and SH seasons in data
season.codes.SH = paste('SH', 10:17, sep = '.')
# Assign each observation in the dat.002 data frame to a NH or SH season (Oct-March = NH, April - Sept = SH)
yy = 2009
for(ii in 1:8){
NH.indices = c(which(dat.002$year == yy & dat.002$month %in% NHfirst.part), which(dat.002$year == yy+1 &  dat.002$month %in% NHsecond.part))
ssn[NH.indices] = season.codes.NH[ii]
SH.indices = which(dat.002$year == yy + 1 & dat.002$month %in% SH)
ssn[SH.indices] = season.codes.SH[ii]
yy = yy + 1
}
# Add the season assignements to the data frame
dat.002$season = (ssn)
rm(ssn) # Tidy up
## Pull out variables used in model
dat.002 = subset(dat.002, select = c('age', 'anyvac', 'anydx', 'anyav', 'season', 'country', 'season', 'flutype', 'year', 'num_month'))
nrow(dat.002) -> original
## Drop rows with missing data:
paste('Dropping', sum((apply(dat.002, MARGIN = 1,  function(xx) (any(is.na(xx)))))), 'rows with NA')
# Exclude rows with any NAs
dat.002 = na.omit(dat.002)
# Exclude those with unknown vaccination status.
invalid = which(dat.002$anyvac == 2)
dat.002 = dat.002[-invalid, ]
paste('Dropping', length(invalid), 'cases wtih unknown vaccination status.')
# Exclude two observations with very low age
invalid = which(dat.002$age == 17)
dat.002 = dat.002[-invalid,]
paste('Dropping', length(invalid), 'cases under age 18.')
## Exclude cases with unknown flutype or coinfection
dat.002 = subset(dat.002, flutype %in% c(1,2,3,4))
paste('Excluded', original-nrow(dat.002), 'total cases with missing info from dat.002')
## Save cleaned data set
write.csv(dat.002, outfile1, row.names = FALSE)
## Check data
# check case counts by country and subtype
table(dat.002$country, dat.002$flutype) -> tab1
tab1
tab1[,1:2]
rowSums(tab1[,1:2])
# ## Visualize age distributions for each subtype
# adH1 = subset(dat.002, flutype == 1, select = age)$age
# adH1 = hist(adH1, breaks = seq(17.5, 90.5, by = 1))$counts
# adH3 = subset(dat.002, flutype == 2, select = age)$age
# adH3 = hist(adH3, breaks = seq(17.5, 90.5, by = 1))$counts
############# END DATA CLEANING #######################
############# dat.002 contains clean data #############
##############################################
##  4. Reformat data for input into likelihood
##     Generate corresponding inputs for each tested factor:
##      - Vaccination in the past year
##      - Antiviral treatment
##      - Presence of underlying conditions
##      - Age (fit as a step function)
##      - Prob of imprinting at the HA group level
##      - " ......................" HA subtype level
##      - " ......................" NA subtype level
##############################################
## rns lists all unique combinations of season and country
## rns will form row names in a master matrix where we store data and relevant model inputs for each country-season of case observation
ccs = rep(unique(dat.002$country), each = length(unique(dat.002$season)))
ssns = rep(unique(dat.002$season), times = length(unique(dat.002$country)))
rns = paste(ccs, ssns, sep = "_") # Row names of the master matrix
####################################################################
## 4a. Make a master table of observed case counts in each country, season and single year of age. Country-years go on rows, age goes on columns.
##  H1.master - confirmed H1N1 case counts
##  H3.master - confirmed H3N2 case counts
##  tested.master - all subjects tested (counts)
##  av.master - fraction of tested cases in each country-season, and single year of age that was treated with antivirals
##  dx.master - fraction of tested cases in each country-season and single year of age that had underlying conditions
##  vac.master - fraction of tested cases in each country-season and single year of age that were vaccinated
H1.master = H3.master = tested.master = av.master = vac.master =  dx.master = matrix(0, nrow = length(rns), ncol = length(18:90), dimnames = list(rns, 18:90))
for(rr in 1:length(rns)){
# Extract data from country-season of interest as a data frame
valid = subset(dat.002, country == ccs[rr] & season == ssns[rr])
# Count the number of subjects from the focal country-season in each single year of age from 18-90
tested = sapply(18:90, FUN = function(aa){sum(valid$age == aa)})
tested.master[rr, ] = tested ## Store the country-year specific counts into the master matrix
## Fill in av.master
num = sapply(18:90, FUN = function(aa){sum(valid$age == aa & valid$anyav == 1)}) # Count the number of subjects in each age bin treated with antivirals
av.master[rr, ] = (num/ifelse(tested > 0, tested, 1)) # Divide by the number tested to get the proprtion treated with avs in each age bin.
## Note - if no patients were enrolled in a particular age bin, normalizing leads to a divide by zero error.
## To avoid this, substitute a 1 where tested == 0 to avoid 0 denominator.
## This substitituion will only be made when no patients were enrolled in a particular age group, so the numerator (number treated with antivirals) will also be 0. The final entry in av.master will be 0/1 = 0
## Repeat for proportion vaccinated:
num = sapply(18:90, FUN = function(aa){sum(valid$age == aa & valid$anyvac == 1)}) ## Fill in master matrix
vac.master[rr, ] = (num/ifelse(tested > 0, tested, 1))
## Repeat for proportion with underlying conditions:
num = sapply(18:90, FUN = function(aa){sum(valid$age == aa & valid$anydx == 1)})
dx.master[rr, ] = (num/ifelse(tested > 0, tested, 1))
# Count up H1N1 cases in each age group from that country and season
H1.master[rr, ] = sapply(18:90, FUN = function(aa){sum(valid$age == aa & valid$flutype == 1)})
# Count up H3N2 cases in each age group from that country and season
H3.master[rr, ] = sapply(18:90, FUN = function(aa){sum(valid$age == aa & valid$flutype == 2)})
}
##############################################
##  4b. Import imprinting reconstructions
## (i.e. probs of imprinting to a particular subtype, given birth year)
##############################################
table(dat.002$country, dat.002$year) # View countires and years in which we need to do reconstrutions
## See ../Reconstructions/02-create-INSIGHT-weights.R for code to do reconstructions
load('../../Reconstructions/INSIGHT_weights2018-12-04.RData')
## this loads a variable named weights
## weights is a list with elements:
## weights$weights.master.1 -> probabilities of imprinting to H1N1 in childhood
## weights$weights.master.2 -> probabilities of imprinting to H2N2 in childhood
## weights$weights.master.3 -> probabilities of imprinting to H3N2 in childhood
## weights$weights.master.naiive -> probabilities of not yet having imprinted (nonzero probs in children only)
##### ------
# Impute possible birth years, and weighted average of birth year-specific imprinting protection probs from age and date of enrollment.
##### -------
# Rationale for multiple possible birth years given in methods
# Initialize matrix to store probs of birth in years y-a-1, y-a, and y-a+1 given the month of observation.
by_probs = matrix(NA, 12, 2, dimnames = list(format(ISOdate(2018,1:12,1),"%B"), c('y-a-1', 'y-a')))
by_probs[,1] = seq(11.5, .5, by = -1)
by_probs[,2] = seq(.5, 11.5, by = 1)
# calculate vectors of possible birth years for each subject
y_a_1 = dat.002$year - dat.002$age - 1 # y-a-1
y_a = y_a_1 + 1 # y-a
# generate a vector of weights, representing the prob that each individual was born in year y-a-1, or y-a, given their month of observation
w1 = by_probs[dat.002$num_month,1]/12
w2 = by_probs[dat.002$num_month,2]/12
any(w1+w2 != 1) # Check that all weights sum to 1 for each individual
# extract probs of protection for each individual, given birth in year y-a-1 and y-a
rns = paste(dat.002$year, dat.002$country, sep = "")
## Subtype -specific protection
pH1pro1 = weights[[1]][rns, as.character(y_a_1)]
pH1pro2 = weights[[1]][rns, as.character(y_a)]
pH3pro1 = weights[[3]][rns, as.character(y_a_1)]
pH3pro2 = weights[[3]][rns, as.character(y_a)]
pg1pro1 = weights[[1]][rns, as.character(y_a_1)]+weights[[2]][rns, as.character(y_a_1)]
pg1pro2 = weights[[1]][rns, as.character(y_a)]+weights[[2]][rns, as.character(y_a)]
pg2pro1 = weights[[3]][rns, as.character(y_a_1)]
pg2pro2 = weights[[3]][rns, as.character(y_a)]
pN1pro1 = weights[[1]][rns, as.character(y_a_1)]
pN1pro2 = weights[[1]][rns, as.character(y_a)]
pN2pro1 = weights[[3]][rns, as.character(y_a_1)]+weights[[2]][rns, as.character(y_a_1)]
pN2pro2 = weights[[3]][rns, as.character(y_a)]+weights[[2]][rns, as.character(y_a)]
# take a weighted average of birth year-specific protection probs for each individual
dat.002$pH1pro = w1*pH1pro1+w2*pH1pro2; rm(pH1pro1, pH1pro2)
dat.002$pH3pro = w1*pH3pro1+w2*pH3pro2; rm(pH3pro1, pH3pro2)
dat.002$pg1pro = w1*pg1pro1+w2*pg1pro2; rm(pg1pro1, pg1pro2)
dat.002$pg2pro = w1*pg2pro1+w2*pg2pro2; rm(pg2pro1, pg2pro2)
dat.002$pN1pro = w1*pN1pro1+w2*pN1pro2; rm(pN1pro1, pN1pro2)
dat.002$pN2pro = w1*pN2pro1+w2*pN2pro2; rm(pN2pro1, pN2pro2, w1, w2, rns)
sessionInfo()
