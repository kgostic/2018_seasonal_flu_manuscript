###       ## Code will optimize all paramters named in "pars," while fixing the value of the profile.par
nll_pandemic = function(pars, fitted.age.pars, wPro.H1, dat.H1,a0.4, a5.10, a11.17, a18.24, a25.31, a32.38, a39.45, a46.52, a53.59, a60.66, a67.73, a74.80, a81.90plus){
# 1. Assign parameters to be fit (all age paramters, and those named in pars)
rPro.H1 = (pars['rPro.H1'])# Relative risk given imprinting protection
b = 1 # Fix relative risk in the baseline group (Ages 0-4) at value 1. Then estimate all others as relative risk. Most should be lower, bounded at 0.
r5.10 = fitted.age.pars['r5.10'] # Relative risk for 5 to 10 year olds (free paramter to estiamte)
r11.17 = fitted.age.pars['r11.17'] # Relative risk for 11-17 year olds
r18.24 = fitted.age.pars['r18.24'] # etc.
r25.31 = fitted.age.pars['r25.31']
r32.38 = fitted.age.pars['r32.38']
r39.45 = fitted.age.pars['r39.45']
r46.52 = fitted.age.pars['r46.52']
r53.59 = fitted.age.pars['r53.59']
r60.66 = fitted.age.pars['r60.66']
r67.73 = fitted.age.pars['r67.73']
r74.80 = fitted.age.pars['r74.80']
r81.90p = fitted.age.pars['r81.90p']
## Age-specific baseline prediction takes the same form for H1N1 and H3N2. Attempt to explain residual, subtype-specific differences through differences in imprinting history, etc. below.
age.baseline = b*(a0.4 +
r5.10*a5.10 +
r11.17*a11.17+
r18.24*a18.24+
r25.31*a25.31+
r32.38*a32.38+
r39.45*a39.45+
r46.52*a46.52+
r53.59*a53.59+
r60.66*a60.66+
r67.73*a67.73+
r74.80*a74.80+
r81.90p*a81.90plus)
age.baseline = age.baseline/sum(age.baseline) # Normalize so that the fraction of cases predicted in each age group sums to 1 across all age groups
# 2. calculate predicted distribution, pp, as a function of the parameters:
# This step gives the model prediction for H1N1 cases
pp.H1 = age.baseline * (wPro.H1*rPro.H1+(1-wPro.H1))
#  3. Likelihood is based on the multinomial density
if(is.null(dim(dat.H1))){ #DO THIS IF DATA FROM ONE YEAR INPUT AS A VECTOR
lk.H1 = -dmultinom(dat.H1, size = sum(dat.H1), prob = pp.H1, log = TRUE) #This line returns the log multinomial density of the observed data, with expected probabilities governed by model predictions.
}else{ #ELSE DO THIS IF MULTI-YEAR DATA INPUT IN A MATRIX
storage = vector('numeric', dim(dat.H1)[1])
for(jj in 1:dim(dat.H1)[1]){ #Find the neg log density for each row (dim 1) and take the sum
storage[jj] = -dmultinom(dat.H1[jj,], size = sum(dat.H1[jj,]), prob = pp.H1[jj,], log = TRUE)
}
lk.H1 = sum(storage)
}
lk.H1
}
## Group-level imprinting
nll_pandemic(pars = c(rPro.H1 = .9), fitted.age.pars = lk.AG$par[-c(1,2)], wPro.H1 = prog1.master_2009, dat.H1 = H1.master_2009, a0.4 = a0.4_2009, a5.10 = a5.10_2009, a11.17 = a11.17_2009, a18.24 = a18.24_2009, a25.31 = a25.31_2009, a32.38 = a32.28_2009, a39.45 = a39.45_2009, a46.52 = a46.52_2009, a53.59 = a53.59_2009, a60.66 = a60.66_2009, a67.73 = a67.73_2009, a74.80 = a74.80_2009, a81.90plus = a81.90plus_2009)
## Group-level imprinting
optim(par = c(rPro.H1 = .9), fn = nll_pandemic, fitted.age.pars = lk.AG$par[-c(1,2)], wPro.H1 = prog1.master_2009, dat.H1 = H1.master_2009, a0.4 = a0.4_2009, a5.10 = a5.10_2009, a11.17 = a11.17_2009, a18.24 = a18.24_2009, a25.31 = a25.31_2009, a32.38 = a32.28_2009, a39.45 = a39.45_2009, a46.52 = a46.52_2009, a53.59 = a53.59_2009, a60.66 = a60.66_2009, a67.73 = a67.73_2009, a74.80 = a74.80_2009, a81.90plus = a81.90plus_2009, method = 'Brent', lower = 0, upper = 1)
## Group-level imprinting
optim(par = c(rPro.H1 = .9), fn = nll_pandemic, fitted.age.pars = lk.AG$par[-c(1,2)], wPro.H1 = prog1.master_2009, dat.H1 = H1.master_2009, a0.4 = a0.4_2009, a5.10 = a5.10_2009, a11.17 = a11.17_2009, a18.24 = a18.24_2009, a25.31 = a25.31_2009, a32.38 = a32.28_2009, a39.45 = a39.45_2009, a46.52 = a46.52_2009, a53.59 = a53.59_2009, a60.66 = a60.66_2009, a67.73 = a67.73_2009, a74.80 = a74.80_2009, a81.90plus = a81.90plus_2009, method = 'Brent', lower = .00001, upper = 1)
## Group-level imprinting
optim(par = c(rPro.H1 = .9), fn = nll_pandemic, fitted.age.pars = lk.AG$par[-c(1,2)], wPro.H1 = prog1.master_2009, dat.H1 = H1.master_2009, a0.4 = a0.4_2009, a5.10 = a5.10_2009, a11.17 = a11.17_2009, a18.24 = a18.24_2009, a25.31 = a25.31_2009, a32.38 = a32.28_2009, a39.45 = a39.45_2009, a46.52 = a46.52_2009, a53.59 = a53.59_2009, a60.66 = a60.66_2009, a67.73 = a67.73_2009, a74.80 = a74.80_2009, a81.90plus = a81.90plus_2009)
## Group-level imprinting
optim(par = c(rPro.H1 = .9), fn = nll_pandemic, fitted.age.pars = lk.AG$par[-c(1,2)], wPro.H1 = prog1.master_2009, dat.H1 = H1.master_2009, a0.4 = a0.4_2009, a5.10 = a5.10_2009, a11.17 = a11.17_2009, a18.24 = a18.24_2009, a25.31 = a25.31_2009, a32.38 = a32.28_2009, a39.45 = a39.45_2009, a46.52 = a46.52_2009, a53.59 = a53.59_2009, a60.66 = a60.66_2009, a67.73 = a67.73_2009, a74.80 = a74.80_2009, a81.90plus = a81.90plus_2009, method = 'Brent', lower = .001, upper = 1)
## Group-level imprinting
optim(par = c(rPro.H1 = .9), fn = nll_pandemic, fitted.age.pars = lk.AG$par[-c(1,2)], wPro.H1 = prog1.master_2009, dat.H1 = H1.master_2009, a0.4 = a0.4_2009, a5.10 = a5.10_2009, a11.17 = a11.17_2009, a18.24 = a18.24_2009, a25.31 = a25.31_2009, a32.38 = a32.28_2009, a39.45 = a39.45_2009, a46.52 = a46.52_2009, a53.59 = a53.59_2009, a60.66 = a60.66_2009, a67.73 = a67.73_2009, a74.80 = a74.80_2009, a81.90plus = a81.90plus_2009, method = 'Brent')
## Group-level imprinting
optim(par = c(rPro.H1 = .9), fn = nll_pandemic, fitted.age.pars = lk.AG$par[-c(1,2)], wPro.H1 = prog1.master_2009, dat.H1 = H1.master_2009, a0.4 = a0.4_2009, a5.10 = a5.10_2009, a11.17 = a11.17_2009, a18.24 = a18.24_2009, a25.31 = a25.31_2009, a32.38 = a32.28_2009, a39.45 = a39.45_2009, a46.52 = a46.52_2009, a53.59 = a53.59_2009, a60.66 = a60.66_2009, a67.73 = a67.73_2009, a74.80 = a74.80_2009, a81.90plus = a81.90plus_2009, method = 'Brent', lower = .1, upper = 1)
## Group-level imprinting
optim(par = c(rPro.H1 = .5), fn = nll_pandemic, fitted.age.pars = lk.AG$par[-c(1,2)], wPro.H1 = prog1.master_2009, dat.H1 = H1.master_2009, a0.4 = a0.4_2009, a5.10 = a5.10_2009, a11.17 = a11.17_2009, a18.24 = a18.24_2009, a25.31 = a25.31_2009, a32.38 = a32.28_2009, a39.45 = a39.45_2009, a46.52 = a46.52_2009, a53.59 = a53.59_2009, a60.66 = a60.66_2009, a67.73 = a67.73_2009, a74.80 = a74.80_2009, a81.90plus = a81.90plus_2009, method = 'Brent', lower = .1, upper = .9)
## Group-level imprinting
optim(par = c(rPro.H1 = .5), fn = nll_pandemic, fitted.age.pars = lk.AG$par[-c(1,2)], wPro.H1 = prog1.master_2009, dat.H1 = H1.master_2009, a0.4 = a0.4_2009, a5.10 = a5.10_2009, a11.17 = a11.17_2009, a18.24 = a18.24_2009, a25.31 = a25.31_2009, a32.38 = a32.28_2009, a39.45 = a39.45_2009, a46.52 = a46.52_2009, a53.59 = a53.59_2009, a60.66 = a60.66_2009, a67.73 = a67.73_2009, a74.80 = a74.80_2009, a81.90plus = a81.90plus_2009)
plot(1, 1)
### Write a version of the likelihood function that calculates imprinting coefficients for 2009 pandemic data (2009-10 season)
###  THIS FUNCTION TAKES THE SAME INPUTS AND OUTPUTS AS NLL, ABOVE, EXCEPT...
###       fitted.age.pars lists the fitted age-specific risk parameters from non-pandemic data.
###         Use these because there was minimal H3N2 circulation during the 2009 pandemic, and so we have
###         no ability to estimate a pandemic-specific age curve
###       No H3N2-specific inputs, because H3N2 didn't really circulate during the pandemic
###       ## The named pars vector should only contain rPro.H1
###       ## Code will optimize all paramters named in "pars," while fixing the value of the profile.par
nll_pandemic = function(pars, fitted.age.pars, wPro.H1, dat.H1,a0.4, a5.10, a11.17, a18.24, a25.31, a32.38, a39.45, a46.52, a53.59, a60.66, a67.73, a74.80, a81.90plus){
# 1. Assign parameters to be fit (all age paramters, and those named in pars)
rPro.H1 = (pars['rPro.H1'])# Relative risk given imprinting protection
b = 1 # Fix relative risk in the baseline group (Ages 0-4) at value 1. Then estimate all others as relative risk. Most should be lower, bounded at 0.
r5.10 = fitted.age.pars['r5.10'] # Relative risk for 5 to 10 year olds (free paramter to estiamte)
r11.17 = fitted.age.pars['r11.17'] # Relative risk for 11-17 year olds
r18.24 = fitted.age.pars['r18.24'] # etc.
r25.31 = fitted.age.pars['r25.31']
r32.38 = fitted.age.pars['r32.38']
r39.45 = fitted.age.pars['r39.45']
r46.52 = fitted.age.pars['r46.52']
r53.59 = fitted.age.pars['r53.59']
r60.66 = fitted.age.pars['r60.66']
r67.73 = fitted.age.pars['r67.73']
r74.80 = fitted.age.pars['r74.80']
r81.90p = fitted.age.pars['r81.90p']
## Age-specific baseline prediction takes the same form for H1N1 and H3N2. Attempt to explain residual, subtype-specific differences through differences in imprinting history, etc. below.
age.baseline = b*(a0.4 +
r5.10*a5.10 +
r11.17*a11.17+
r18.24*a18.24+
r25.31*a25.31+
r32.38*a32.38+
r39.45*a39.45+
r46.52*a46.52+
r53.59*a53.59+
r60.66*a60.66+
r67.73*a67.73+
r74.80*a74.80+
r81.90p*a81.90plus)
age.baseline = age.baseline/sum(age.baseline) # Normalize so that the fraction of cases predicted in each age group sums to 1 across all age groups
# 2. calculate predicted distribution, pp, as a function of the parameters:
# This step gives the model prediction for H1N1 cases
pp.H1 = age.baseline * (wPro.H1*rPro.H1+(1-wPro.H1))
#  3. Likelihood is based on the multinomial density
if(is.null(dim(dat.H1))){ #DO THIS IF DATA FROM ONE YEAR INPUT AS A VECTOR
lk.H1 = -dmultinom(dat.H1, size = sum(dat.H1), prob = pp.H1, log = TRUE) #This line returns the log multinomial density of the observed data, with expected probabilities governed by model predictions.
}else{ #ELSE DO THIS IF MULTI-YEAR DATA INPUT IN A MATRIX
storage = vector('numeric', dim(dat.H1)[1])
for(jj in 1:dim(dat.H1)[1]){ #Find the neg log density for each row (dim 1) and take the sum
storage[jj] = -dmultinom(dat.H1[jj,], size = sum(dat.H1[jj,]), prob = pp.H1[jj,], log = TRUE)
}
lk.H1 = sum(storage)
}
plot(1, 1)
text(1,1, paste(rPro.H1))
lk.H1
}
## Group-level imprinting
optim(par = c(rPro.H1 = .5), fn = nll_pandemic, fitted.age.pars = lk.AG$par[-c(1,2)], wPro.H1 = prog1.master_2009, dat.H1 = H1.master_2009, a0.4 = a0.4_2009, a5.10 = a5.10_2009, a11.17 = a11.17_2009, a18.24 = a18.24_2009, a25.31 = a25.31_2009, a32.38 = a32.28_2009, a39.45 = a39.45_2009, a46.52 = a46.52_2009, a53.59 = a53.59_2009, a60.66 = a60.66_2009, a67.73 = a67.73_2009, a74.80 = a74.80_2009, a81.90plus = a81.90plus_2009)
### Write a version of the likelihood function that calculates imprinting coefficients for 2009 pandemic data (2009-10 season)
###  THIS FUNCTION TAKES THE SAME INPUTS AND OUTPUTS AS NLL, ABOVE, EXCEPT...
###       fitted.age.pars lists the fitted age-specific risk parameters from non-pandemic data.
###         Use these because there was minimal H3N2 circulation during the 2009 pandemic, and so we have
###         no ability to estimate a pandemic-specific age curve
###       No H3N2-specific inputs, because H3N2 didn't really circulate during the pandemic
###       ## The named pars vector should only contain rPro.H1
###       ## Code will optimize all paramters named in "pars," while fixing the value of the profile.par
nll_pandemic = function(pars, fitted.age.pars, wPro.H1, dat.H1,a0.4, a5.10, a11.17, a18.24, a25.31, a32.38, a39.45, a46.52, a53.59, a60.66, a67.73, a74.80, a81.90plus){
# 1. Assign parameters to be fit (all age paramters, and those named in pars)
rPro.H1 = (pars['rPro.H1'])# Relative risk given imprinting protection
b = 1 # Fix relative risk in the baseline group (Ages 0-4) at value 1. Then estimate all others as relative risk. Most should be lower, bounded at 0.
r5.10 = fitted.age.pars['r5.10'] # Relative risk for 5 to 10 year olds (free paramter to estiamte)
r11.17 = fitted.age.pars['r11.17'] # Relative risk for 11-17 year olds
r18.24 = fitted.age.pars['r18.24'] # etc.
r25.31 = fitted.age.pars['r25.31']
r32.38 = fitted.age.pars['r32.38']
r39.45 = fitted.age.pars['r39.45']
r46.52 = fitted.age.pars['r46.52']
r53.59 = fitted.age.pars['r53.59']
r60.66 = fitted.age.pars['r60.66']
r67.73 = fitted.age.pars['r67.73']
r74.80 = fitted.age.pars['r74.80']
r81.90p = fitted.age.pars['r81.90p']
## Age-specific baseline prediction takes the same form for H1N1 and H3N2. Attempt to explain residual, subtype-specific differences through differences in imprinting history, etc. below.
age.baseline = b*(a0.4 +
r5.10*a5.10 +
r11.17*a11.17+
r18.24*a18.24+
r25.31*a25.31+
r32.38*a32.38+
r39.45*a39.45+
r46.52*a46.52+
r53.59*a53.59+
r60.66*a60.66+
r67.73*a67.73+
r74.80*a74.80+
r81.90p*a81.90plus)
age.baseline = age.baseline/sum(age.baseline) # Normalize so that the fraction of cases predicted in each age group sums to 1 across all age groups
# 2. calculate predicted distribution, pp, as a function of the parameters:
# This step gives the model prediction for H1N1 cases
pp.H1 = age.baseline * (wPro.H1*rPro.H1+(1-wPro.H1))
#  3. Likelihood is based on the multinomial density
if(is.null(dim(dat.H1))){ #DO THIS IF DATA FROM ONE YEAR INPUT AS A VECTOR
lk.H1 = -dmultinom(dat.H1, size = sum(dat.H1), prob = pp.H1, log = TRUE) #This line returns the log multinomial density of the observed data, with expected probabilities governed by model predictions.
}else{ #ELSE DO THIS IF MULTI-YEAR DATA INPUT IN A MATRIX
storage = vector('numeric', dim(dat.H1)[1])
for(jj in 1:dim(dat.H1)[1]){ #Find the neg log density for each row (dim 1) and take the sum
storage[jj] = -dmultinom(dat.H1[jj,], size = sum(dat.H1[jj,]), prob = pp.H1[jj,], log = TRUE)
}
lk.H1 = sum(storage)
}
plot(1, 1, col = 'white')
text(1,1, paste(rPro.H1))
lk.H1
}
## Group-level imprinting
optim(par = c(rPro.H1 = .5), fn = nll_pandemic, fitted.age.pars = lk.AG$par[-c(1,2)], wPro.H1 = prog1.master_2009, dat.H1 = H1.master_2009, a0.4 = a0.4_2009, a5.10 = a5.10_2009, a11.17 = a11.17_2009, a18.24 = a18.24_2009, a25.31 = a25.31_2009, a32.38 = a32.28_2009, a39.45 = a39.45_2009, a46.52 = a46.52_2009, a53.59 = a53.59_2009, a60.66 = a60.66_2009, a67.73 = a67.73_2009, a74.80 = a74.80_2009, a81.90plus = a81.90plus_2009)
## Group-level imprinting
optim(par = c(rPro.H1 = .5), fn = nll_pandemic, fitted.age.pars = lk.AG$par[-c(1,2)], wPro.H1 = prog1.master_2009, dat.H1 = H1.master_2009, a0.4 = a0.4_2009, a5.10 = a5.10_2009, a11.17 = a11.17_2009, a18.24 = a18.24_2009, a25.31 = a25.31_2009, a32.38 = a32.28_2009, a39.45 = a39.45_2009, a46.52 = a46.52_2009, a53.59 = a53.59_2009, a60.66 = a60.66_2009, a67.73 = a67.73_2009, a74.80 = a74.80_2009, a81.90plus = a81.90plus_2009, method = 'Brent', lower = 0, upper = 1)
dev.off()
## Group-level imprinting
optim(par = c(rPro.H1 = .5), fn = nll_pandemic, fitted.age.pars = lk.AG$par[-c(1,2)], wPro.H1 = prog1.master_2009, dat.H1 = H1.master_2009, a0.4 = a0.4_2009, a5.10 = a5.10_2009, a11.17 = a11.17_2009, a18.24 = a18.24_2009, a25.31 = a25.31_2009, a32.38 = a32.28_2009, a39.45 = a39.45_2009, a46.52 = a46.52_2009, a53.59 = a53.59_2009, a60.66 = a60.66_2009, a67.73 = a67.73_2009, a74.80 = a74.80_2009, a81.90plus = a81.90plus_2009, method = 'Brent', lower = 0, upper = 1)
pars = c(rPro.H1 = .5)
fitted.age.pars = lk.AG$par[-c(1,2)]
wPro.H1 = prog1.master_2009
optim(par = c(rPro.H1 = .5), fn = nll_pandemic, fitted.age.pars = lk.AG$par[-c(1,2)], wPro.H1 = prog1.master_2009,
)
dat.H1 = H1.master_2009
a0.4 = a0.4_2009
a5.10 = a5.10_2009
a11.17 = a11.17_2009
a18.24 = a18.24_2009
a25.31 = a25.31_2009
a32.38 = a32.28_2009
a39.45 = a39.45_2009
a46.52 = a46.52_2009
a53.59 = a53.59_2009
a60.66 = a60.66_2009
a67.73 = a67.73_2009
a74.80 = a74.80_2009
a81.90plus = a81.90plus_2009
# 1. Assign parameters to be fit (all age paramters, and those named in pars)
rPro.H1 = (pars['rPro.H1'])# Relative risk given imprinting protection
b = 1 # Fix relative risk in the baseline group (Ages 0-4) at value 1. Then estimate all others as relative risk. Most should be lower, bounded at 0.
r5.10 = fitted.age.pars['r5.10'] # Relative risk for 5 to 10 year olds (free paramter to estiamte)
r11.17 = fitted.age.pars['r11.17'] # Relative risk for 11-17 year olds
r18.24 = fitted.age.pars['r18.24'] # etc.
r25.31 = fitted.age.pars['r25.31']
r32.38 = fitted.age.pars['r32.38']
r39.45 = fitted.age.pars['r39.45']
r46.52 = fitted.age.pars['r46.52']
r53.59 = fitted.age.pars['r53.59']
r60.66 = fitted.age.pars['r60.66']
r67.73 = fitted.age.pars['r67.73']
r74.80 = fitted.age.pars['r74.80']
r81.90p = fitted.age.pars['r81.90p']
## Age-specific baseline prediction takes the same form for H1N1 and H3N2. Attempt to explain residual, subtype-specific differences through differences in imprinting history, etc. below.
age.baseline = b*(a0.4 +
r5.10*a5.10 +
r11.17*a11.17+
r18.24*a18.24+
r25.31*a25.31+
r32.38*a32.38+
r39.45*a39.45+
r46.52*a46.52+
r53.59*a53.59+
r60.66*a60.66+
r67.73*a67.73+
r74.80*a74.80+
r81.90p*a81.90plus)
age.baseline = age.baseline/sum(age.baseline) # Normalize so that the fraction of cases predicted in each age group sums to 1 across all age groups
# 2. calculate predicted distribution, pp, as a function of the parameters:
# This step gives the model prediction for H1N1 cases
pp.H1 = age.baseline * (wPro.H1*rPro.H1+(1-wPro.H1))
pp.H1
#  3. Likelihood is based on the multinomial density
if(is.null(dim(dat.H1))){ #DO THIS IF DATA FROM ONE YEAR INPUT AS A VECTOR
lk.H1 = -dmultinom(dat.H1, size = sum(dat.H1), prob = pp.H1, log = TRUE) #This line returns the log multinomial density of the observed data, with expected probabilities governed by model predictions.
}else{ #ELSE DO THIS IF MULTI-YEAR DATA INPUT IN A MATRIX
storage = vector('numeric', dim(dat.H1)[1])
for(jj in 1:dim(dat.H1)[1]){ #Find the neg log density for each row (dim 1) and take the sum
storage[jj] = -dmultinom(dat.H1[jj,], size = sum(dat.H1[jj,]), prob = pp.H1[jj,], log = TRUE)
}
lk.H1 = sum(storage)
}
plot(1, 1, col = 'white')
text(1,1, paste(rPro.H1))
lk.H1
### Write a version of the likelihood function that calculates imprinting coefficients for 2009 pandemic data (2009-10 season)
###  THIS FUNCTION TAKES THE SAME INPUTS AND OUTPUTS AS NLL, ABOVE, EXCEPT...
###       fitted.age.pars lists the fitted age-specific risk parameters from non-pandemic data.
###         Use these because there was minimal H3N2 circulation during the 2009 pandemic, and so we have
###         no ability to estimate a pandemic-specific age curve
###       No H3N2-specific inputs, because H3N2 didn't really circulate during the pandemic
###       ## The named pars vector should only contain rPro.H1
###       ## Code will optimize all paramters named in "pars," while fixing the value of the profile.par
nll_pandemic = function(pars, fitted.age.pars, wPro.H1, dat.H1,a0.4, a5.10, a11.17, a18.24, a25.31, a32.38, a39.45, a46.52, a53.59, a60.66, a67.73, a74.80, a81.90plus){
# 1. Assign parameters to be fit (all age paramters, and those named in pars)
rPro.H1 = (pars['rPro.H1'])# Relative risk given imprinting protection
b = 1 # Fix relative risk in the baseline group (Ages 0-4) at value 1. Then estimate all others as relative risk. Most should be lower, bounded at 0.
r5.10 = fitted.age.pars['r5.10'] # Relative risk for 5 to 10 year olds (free paramter to estiamte)
r11.17 = fitted.age.pars['r11.17'] # Relative risk for 11-17 year olds
r18.24 = fitted.age.pars['r18.24'] # etc.
r25.31 = fitted.age.pars['r25.31']
r32.38 = fitted.age.pars['r32.38']
r39.45 = fitted.age.pars['r39.45']
r46.52 = fitted.age.pars['r46.52']
r53.59 = fitted.age.pars['r53.59']
r60.66 = fitted.age.pars['r60.66']
r67.73 = fitted.age.pars['r67.73']
r74.80 = fitted.age.pars['r74.80']
r81.90p = fitted.age.pars['r81.90p']
## Age-specific baseline prediction takes the same form for H1N1 and H3N2. Attempt to explain residual, subtype-specific differences through differences in imprinting history, etc. below.
age.baseline = b*(a0.4 +
r5.10*a5.10 +
r11.17*a11.17+
r18.24*a18.24+
r25.31*a25.31+
r32.38*a32.38+
r39.45*a39.45+
r46.52*a46.52+
r53.59*a53.59+
r60.66*a60.66+
r67.73*a67.73+
r74.80*a74.80+
r81.90p*a81.90plus)
age.baseline = age.baseline/sum(age.baseline) # Normalize so that the fraction of cases predicted in each age group sums to 1 across all age groups
# 2. calculate predicted distribution, pp, as a function of the parameters:
# This step gives the model prediction for H1N1 cases
pp.H1 = age.baseline * (wPro.H1*rPro.H1+(1-wPro.H1))
#  3. Likelihood is based on the multinomial density
if(is.null(dim(dat.H1))){ #DO THIS IF DATA FROM ONE YEAR INPUT AS A VECTOR
lk.H1 = -dmultinom(dat.H1, size = sum(dat.H1), prob = pp.H1, log = TRUE) #This line returns the log multinomial density of the observed data, with expected probabilities governed by model predictions.
}else{ #ELSE DO THIS IF MULTI-YEAR DATA INPUT IN A MATRIX
storage = vector('numeric', dim(dat.H1)[1])
for(jj in 1:dim(dat.H1)[1]){ #Find the neg log density for each row (dim 1) and take the sum
storage[jj] = -dmultinom(dat.H1[jj,], size = sum(dat.H1[jj,]), prob = pp.H1[jj,], log = TRUE)
}
lk.H1 = sum(storage)
}
plot(1, 1, col = 'white')
text(1,1, paste(rPro.H1))
lk.H1
}
rm(list = ls())
## Import data and run multinomila model comparison
## Fit to AZ data, from all seasons
## Fit a single age curve to all data
## Test three impriting hypothese: HA group level, HA subtype level, NA subtype level
## SAVE MODEL FITS
## Clear memory
rm(list = ls())
#setwd('2017_AZ/')
## OUTPUTS
modelfits = 'processed-data/AZ_model_fits.RData'
# outfile1 = '../figures/AZ_predictions.pdf' # Plot of model predictions vs. observed data
# outfile2 = '../figures/AZ_AIC.pdf' # Plot of AIC scores and factors included
# outfile3 = '../figures/AZ_NA_model_results.pdf' # Plot of AIC scores and factors included
# outfile4 = '../figures/AZ_HAsub_model_results.pdf' # Plot of AIC scores and factors included
#######################################
## Load data, model inputs, and likelihood function
######################################
source('00-Inputs_multinomial.R')
source('0func-likelihood.R')
## Test likelihood optimization
## Maximal model, includes imprinting protection
nll.wrapper(pars.in = c('rPro.H1' = .5, 'rPro.H3' = .5), pro.H1 = proH1.master, pro.H3 = proH3.master, lower.in = c(.001, .001), upper.in = c(1, 1))
## Reduced model, vaccination and imprinting only
nll.wrapper(pars.in = NULL, pro.H1 = 1, pro.H3 = 1, lower.in = NULL, upper.in = NULL)
#######################################
## Model comparison
##      null is all cases tested
##      fit to H1N1
######################################
pro.low = .001; pro.high = 1 # Upper and lower bounds for protection estimates
## set upper and lower bounds for all pars
## 1. G
lk.AG = nll.wrapper(pars.in = c('rPro.H1' = .5, 'rPro.H3' = .5), pro.H1 = prog1.master, pro.H3 = prog2.master, lower.in = c(pro.low, pro.low), upper = c(pro.high, pro.high)); lk.AG
## 2. S
lk.AS = nll.wrapper(pars.in = c('rPro.H1' = .5, 'rPro.H3' = .5), pro.H1 = proH1.master, pro.H3 = proH3.master, lower.in = c(pro.low, pro.low), upper = c(pro.high, pro.high)); lk.AS
## 3. N
lk.AN = nll.wrapper(pars.in = c('rPro.H1' = .5, 'rPro.H3' = .5), pro.H1 = proN1.master, pro.H3 = proN2.master, lower.in = c(pro.low, pro.low), upper = c(pro.high, pro.high)); lk.AN
## 4. NULL
lk.A = nll.wrapper(pars.in = NULL, pro.H1 = 0, pro.H3 = 0, lower.in = NULL, upper = NULL); lk.A
## Pull out the variable names that store likelihoods
mods = mget(ls(pattern = "lk."))
nll = numeric(length(mods))
AICs = numeric(length(mods))
for(ii in 1:length(mods)){
nll[ii] = mods[[ii]]$value
AICs[ii] = 2*length(mods[[ii]]$par)+2*mods[[ii]]$value
}
names(AICs) = names(mods)
names(nll) = names(mods)
AICs = sort(AICs)
del.AIC = AICs - min(AICs)
del.AIC
#######################################
## SAVE MODEL FITS AND AIC
######################################
save(del.AIC, lk.A, lk.AG, lk.AN, lk.AS, file = modelfits)
## Re-do fits using bet-fit age pars for 2009 pandemic data
## Group-level imprinting
optim(par = c(rPro.H1 = .5), fn = nll_pandemic, fitted.age.pars = lk.AG$par[-c(1,2)], wPro.H1 = prog1.master_2009, dat.H1 = H1.master_2009, a0.4 = a0.4_2009, a5.10 = a5.10_2009, a11.17 = a11.17_2009, a18.24 = a18.24_2009, a25.31 = a25.31_2009, a32.38 = a32.28_2009, a39.45 = a39.45_2009, a46.52 = a46.52_2009, a53.59 = a53.59_2009, a60.66 = a60.66_2009, a67.73 = a67.73_2009, a74.80 = a74.80_2009, a81.90plus = a81.90plus_2009, method = 'Brent', lower = 0, upper = 1)
## Group-level imprinting
optim(par = c(rPro.H1 = .5), fn = nll_pandemic, fitted.age.pars = lk.AG$par[-c(1,2)], wPro.H1 = prog1.master_2009, dat.H1 = H1.master_2009, a0.4 = a0.4_2009, a5.10 = a5.10_2009, a11.17 = a11.17_2009, a18.24 = a18.24_2009, a25.31 = a25.31_2009, a32.38 = a32.28_2009, a39.45 = a39.45_2009, a46.52 = a46.52_2009, a53.59 = a53.59_2009, a60.66 = a60.66_2009, a67.73 = a67.73_2009, a74.80 = a74.80_2009, a81.90plus = a81.90plus_2009, method = 'Brent', lower = 0.001, upper = 1)
pars = c(rPro.H1 = 0.382584045238855)
# 1. Assign parameters to be fit (all age paramters, and those named in pars)
rPro.H1 = (pars['rPro.H1'])# Relative risk given imprinting protection
b = 1 # Fix relative risk in the baseline group (Ages 0-4) at value 1. Then estimate all others as relative risk. Most should be lower, bounded at 0.
r5.10 = fitted.age.pars['r5.10'] # Relative risk for 5 to 10 year olds (free paramter to estiamte)
r11.17 = fitted.age.pars['r11.17'] # Relative risk for 11-17 year olds
r18.24 = fitted.age.pars['r18.24'] # etc.
fitted.age.pars = lk.AG$par[-c(1,2)]
wPro.H1 = prog1.master_2009
dat.H1 = H1.master_2009
a0.4 = a0.4_2009
a5.10 = a5.10_2009
a11.17 = a11.17_2009
a18.24 = a18.24_2009
a25.31 = a25.31_2009
a32.38 = a32.28_2009
a39.45 = a39.45_2009
a46.52 = a46.52_2009
a53.59 = a53.59_2009
a60.66 = a60.66_2009
a67.73 = a67.73_2009
a74.80 = a74.80_2009
a81.90plus = a81.90plus_2009
# 1. Assign parameters to be fit (all age paramters, and those named in pars)
rPro.H1 = (pars['rPro.H1'])# Relative risk given imprinting protection
b = 1 # Fix relative risk in the baseline group (Ages 0-4) at value 1. Then estimate all others as relative risk. Most should be lower, bounded at 0.
r5.10 = fitted.age.pars['r5.10'] # Relative risk for 5 to 10 year olds (free paramter to estiamte)
r11.17 = fitted.age.pars['r11.17'] # Relative risk for 11-17 year olds
r18.24 = fitted.age.pars['r18.24'] # etc.
r25.31 = fitted.age.pars['r25.31']
r32.38 = fitted.age.pars['r32.38']
r39.45 = fitted.age.pars['r39.45']
r46.52 = fitted.age.pars['r46.52']
r53.59 = fitted.age.pars['r53.59']
r60.66 = fitted.age.pars['r60.66']
r67.73 = fitted.age.pars['r67.73']
r74.80 = fitted.age.pars['r74.80']
r81.90p = fitted.age.pars['r81.90p']
## Age-specific baseline prediction takes the same form for H1N1 and H3N2. Attempt to explain residual, subtype-specific differences through differences in imprinting history, etc. below.
age.baseline = b*(a0.4 +
r5.10*a5.10 +
r11.17*a11.17+
r18.24*a18.24+
r25.31*a25.31+
r32.38*a32.38+
r39.45*a39.45+
r46.52*a46.52+
r53.59*a53.59+
r60.66*a60.66+
r67.73*a67.73+
r74.80*a74.80+
r81.90p*a81.90plus)
age.baseline = age.baseline/sum(age.baseline) # Normalize so that the fraction of cases predicted in each age group sums to 1 across all age groups
# 2. calculate predicted distribution, pp, as a function of the parameters:
# This step gives the model prediction for H1N1 cases
pp.H1 = age.baseline * (wPro.H1*rPro.H1+(1-wPro.H1))
#  3. Likelihood is based on the multinomial density
if(is.null(dim(dat.H1))){ #DO THIS IF DATA FROM ONE YEAR INPUT AS A VECTOR
lk.H1 = -dmultinom(dat.H1, size = sum(dat.H1), prob = pp.H1, log = TRUE) #This line returns the log multinomial density of the observed data, with expected probabilities governed by model predictions.
}else{ #ELSE DO THIS IF MULTI-YEAR DATA INPUT IN A MATRIX
storage = vector('numeric', dim(dat.H1)[1])
for(jj in 1:dim(dat.H1)[1]){ #Find the neg log density for each row (dim 1) and take the sum
storage[jj] = -dmultinom(dat.H1[jj,], size = sum(dat.H1[jj,]), prob = pp.H1[jj,], log = TRUE)
}
lk.H1 = sum(storage)
}
plot(1, 1, col = 'white')
text(1,1, paste(rPro.H1))
lk.H1
## Group-level imprinting
optim(par = c(rPro.H1 = 0.382584045238855), fn = nll_pandemic, fitted.age.pars = lk.AG$par[-c(1,2)], wPro.H1 = prog1.master_2009, dat.H1 = H1.master_2009, a0.4 = a0.4_2009, a5.10 = a5.10_2009, a11.17 = a11.17_2009, a18.24 = a18.24_2009, a25.31 = a25.31_2009, a32.38 = a32.28_2009, a39.45 = a39.45_2009, a46.52 = a46.52_2009, a53.59 = a53.59_2009, a60.66 = a60.66_2009, a67.73 = a67.73_2009, a74.80 = a74.80_2009, a81.90plus = a81.90plus_2009, method = 'Brent', lower = 0.001, upper = 1)
## Group-level imprinting
optim(par = c(rPro.H1 = 0.382584045238855), fn = nll_pandemic, fitted.age.pars = lk.AG$par[-c(1,2)], wPro.H1 = prog1.master_2009, dat.H1 = H1.master_2009, a0.4 = a0.4_2009, a5.10 = a5.10_2009, a11.17 = a11.17_2009, a18.24 = a18.24_2009, a25.31 = a25.31_2009, a32.38 = a32.28_2009, a39.45 = a39.45_2009, a46.52 = a46.52_2009, a53.59 = a53.59_2009, a60.66 = a60.66_2009, a67.73 = a67.73_2009, a74.80 = a74.80_2009, a81.90plus = a81.90plus_2009, method = 'Brent', lower = 0.001, upper = 1)
rPro.H1
pp.H1
dat.H1
mapply(FUN = dmultinom(x = dat.H1, size = sum(dat.H1), prob = pp.H1, log = TRUE))
mapply(FUN = dmultinom(x = dat.H1, size = sum(dat.H1), prob = pp.H1))
mapply(FUN = dmultinom(x = dat.H1, size = sum(dat.H1), prob = pp.H1))
pp.H1^dat.H1
log(pp.H1^dat.H1)
pp.H1^dat.H1
cbind(pp.H1, dat.H1, pp.H1^dat.H1)
.017^331
## Group-level imprinting
nll_pandemic(pars = c(rPro.H1 = .3), fitted.age.pars = lk.AG$par[-c(1,2)], wPro.H1 = prog1.master_2009, dat.H1 = H1.master_2009, a0.4 = a0.4_2009, a5.10 = a5.10_2009, a11.17 = a11.17_2009, a18.24 = a18.24_2009, a25.31 = a25.31_2009, a32.38 = a32.28_2009, a39.45 = a39.45_2009, a46.52 = a46.52_2009, a53.59 = a53.59_2009, a60.66 = a60.66_2009, a67.73 = a67.73_2009, a74.80 = a74.80_2009, a81.90plus = a81.90plus_2009)
pars = c(rPro.H1 = .3)
fitted.age.pars = lk.AG$par[-c(1,2)]
wPro.H1 = prog1.master_2009
dat.H1 = H1.master_2009
a0.4 = a0.4_2009
a5.10 = a5.10_2009
a11.17 = a11.17_2009
a18.24 = a18.24_2009
a25.31 = a25.31_2009
a32.38 = a32.28_2009
a39.45 = a39.45_2009
a46.52 = a46.52_2009
a53.59 = a53.59_2009
a60.66 = a60.66_2009
a67.73 = a67.73_2009
a74.80 = a74.80_2009
a81.90plus = a81.90plus_2009
# 1. Assign parameters to be fit (all age paramters, and those named in pars)
rPro.H1 = (pars['rPro.H1'])# Relative risk given imprinting protection
b = 1 # Fix relative risk in the baseline group (Ages 0-4) at value 1. Then estimate all others as relative risk. Most should be lower, bounded at 0.
r5.10 = fitted.age.pars['r5.10'] # Relative risk for 5 to 10 year olds (free paramter to estiamte)
r11.17 = fitted.age.pars['r11.17'] # Relative risk for 11-17 year olds
r18.24 = fitted.age.pars['r18.24'] # etc.
r25.31 = fitted.age.pars['r25.31']
r32.38 = fitted.age.pars['r32.38']
r39.45 = fitted.age.pars['r39.45']
r46.52 = fitted.age.pars['r46.52']
r53.59 = fitted.age.pars['r53.59']
r60.66 = fitted.age.pars['r60.66']
r67.73 = fitted.age.pars['r67.73']
r74.80 = fitted.age.pars['r74.80']
r81.90p = fitted.age.pars['r81.90p']
## Age-specific baseline prediction takes the same form for H1N1 and H3N2. Attempt to explain residual, subtype-specific differences through differences in imprinting history, etc. below.
age.baseline = b*(a0.4 +
r5.10*a5.10 +
r11.17*a11.17+
r18.24*a18.24+
r25.31*a25.31+
r32.38*a32.38+
r39.45*a39.45+
r46.52*a46.52+
r53.59*a53.59+
r60.66*a60.66+
r67.73*a67.73+
r74.80*a74.80+
r81.90p*a81.90plus)
age.baseline = age.baseline/sum(age.baseline) # Normalize so that the fraction of cases predicted in each age group sums to 1 across all age groups
# 2. calculate predicted distribution, pp, as a function of the parameters:
# This step gives the model prediction for H1N1 cases
pp.H1 = age.baseline * (wPro.H1*rPro.H1+(1-wPro.H1))
pp.H1
pp.H1$dat.H1
pp.H1^dat.H1
lk.H1 = -dmultinom(dat.H1, size = sum(dat.H1), prob = pp.H1, log = TRUE) #This line returns the log multinomial density of the observed data, with expected probabilities governed by model predictions.
lk.H1
